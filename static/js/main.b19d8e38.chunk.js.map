{"version":3,"sources":["constants/routes.js","App.js","context/themeContext.js","index.js"],"names":["DASHBOARD","PROJECTS","CONTACT","RESUME","ABOUT","Dashboard","lazy","Projects","Contact","Resume","About","App","fallback","exact","path","ROUTES","component","getInitialTheme","window","localStorage","storedPrefs","getItem","matchMedia","matches","ThemeContext","React","createContext","ThemeProvider","initialTheme","children","useState","theme","setTheme","checkTheme","existing","root","document","documentElement","isDark","classList","remove","add","setItem","useEffect","Provider","value","ReactDOM","render","maxSnack","getElementById"],"mappings":"uIAAA,0KAAO,IAAMA,EAAY,IACZC,EAAW,YACXC,EAAU,WACVC,EAAS,UACTC,EAAQ,U,uICAfC,EAAYC,gBAAK,kBAAM,6DACvBC,EAAWD,gBAAK,kBAAM,6DACtBE,EAAUF,gBAAK,kBAAM,6DACrBG,EAASH,gBAAK,kBAAM,uDACpBI,EAAQJ,gBAAK,kBAAM,6DAkBVK,MAhBf,WACE,OACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,2CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,IAAkBC,UAAWX,IAChD,cAAC,IAAD,CAAOQ,OAAK,EAACC,KAAMC,IAAiBC,UAAWT,IAC/C,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAMC,IAAgBC,UAAWR,IAC9C,cAAC,IAAD,CAAOK,OAAK,EAACC,KAAMC,IAAeC,UAAWP,IAC7C,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAMC,IAAcC,UAAWN,Y,gBChBhDO,EAAkB,WACtB,GAAsB,qBAAXC,QAA0BA,OAAOC,aAAc,CACxD,IAAMC,EAAcF,OAAOC,aAAaE,QAAQ,iBAChD,GAA2B,kBAAhBD,EACT,OAAOA,EAET,GAAIF,OAAOI,WAAW,gCAAgCC,QACpD,MAAO,OAGX,MAAO,SAGIC,EAAeC,IAAMC,gBAErBC,EAAgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC5C,EAA0BJ,IAAMK,SAASb,GAAzC,mBAAOc,EAAP,KAAcC,EAAd,KAEMC,EAAa,SAACC,GAClB,IAAMC,EAAOjB,OAAOkB,SAASC,gBACvBC,EAAsB,SAAbJ,EAEfC,EAAKI,UAAUC,OAAOF,EAAS,QAAU,QACzCH,EAAKI,UAAUE,IAAIP,GAEnBf,aAAauB,QAAQ,gBAAiBR,IAWxC,OARIN,GACFK,EAAWL,GAGbH,IAAMkB,WAAU,WACdV,EAAWF,KACV,CAACA,IAEG,cAACP,EAAaoB,SAAd,CAAuBC,MAAO,CAAEd,QAAOC,YAAvC,SAAoDH,KChC7DiB,IAASC,OACP,cAAC,IAAD,CAAkBC,SAAU,EAA5B,SACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJZ,SAASa,eAAe,W","file":"static/js/main.b19d8e38.chunk.js","sourcesContent":["export const DASHBOARD = '/';\nexport const PROJECTS = '/projects';\nexport const CONTACT = '/contact';\nexport const RESUME = '/resume';\nexport const ABOUT = '/about';\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport * as ROUTES from './constants/routes';\n\nconst Dashboard = lazy(() => import('./pages/dashboard'));\nconst Projects = lazy(() => import('./pages/projects'));\nconst Contact = lazy(() => import('./pages/contact'));\nconst Resume = lazy(() => import('./pages/resume'));\nconst About = lazy(() => import('./pages/about'));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<p>Loading...</p>}>\n        <Switch>\n          <Route exact path={ROUTES.DASHBOARD} component={Dashboard} />\n          <Route exact path={ROUTES.PROJECTS} component={Projects} />\n          <Route exact path={ROUTES.CONTACT} component={Contact} />\n          <Route exact path={ROUTES.RESUME} component={Resume} />\n          <Route exact path={ROUTES.ABOUT} component={About} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst getInitialTheme = () => {\n  if (typeof window !== 'undefined' && window.localStorage) {\n    const storedPrefs = window.localStorage.getItem('current-theme');\n    if (typeof storedPrefs === 'string') {\n      return storedPrefs;\n    }\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n  }\n  return 'light';\n};\n\nexport const ThemeContext = React.createContext();\n\nexport const ThemeProvider = ({ initialTheme, children }) => {\n  const [theme, setTheme] = React.useState(getInitialTheme);\n\n  const checkTheme = (existing) => {\n    const root = window.document.documentElement;\n    const isDark = existing === 'dark';\n\n    root.classList.remove(isDark ? 'light' : 'dark');\n    root.classList.add(existing);\n\n    localStorage.setItem('current-theme', existing);\n  };\n\n  if (initialTheme) {\n    checkTheme(initialTheme);\n  }\n\n  React.useEffect(() => {\n    checkTheme(theme);\n  }, [theme]);\n\n  return <ThemeContext.Provider value={{ theme, setTheme }}>{children}</ThemeContext.Provider>;\n};\n\nThemeProvider.propTypes = {\n  initialTheme: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SnackbarProvider } from 'notistack';\nimport App from './App';\nimport './styles/app.css';\nimport { ThemeProvider } from './context/themeContext';\n\nReactDOM.render(\n  <SnackbarProvider maxSnack={3}>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </SnackbarProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}